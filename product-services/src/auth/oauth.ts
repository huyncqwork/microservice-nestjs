// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.2
//   protoc               v3.20.3
// source: src/grpc-service/protos/oauth.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "hello";

export interface LoginRequest {
  token: string;
}

export interface Empty {
}

export interface HelloRequest {
  name: string;
}

export interface HelloResponse {
  message: string;
}

export interface DataBaseResponse {
  status: number;
  data: Empty | undefined;
  message: string;
}

export interface SendRequest {
  token: string;
}

export interface StatusResponse {
  status: number;
}

export const HELLO_PACKAGE_NAME = "hello";

export interface HelloServiceClient {
  sayHello(request: HelloRequest, metadata?: Metadata): Observable<HelloResponse>;

  getToken(request: LoginRequest, metadata?: Metadata): Observable<DataBaseResponse>;

  checkToken(request: SendRequest, metadata?: Metadata): Observable<Empty>;
}

export interface HelloServiceController {
  sayHello(
    request: HelloRequest,
    metadata?: Metadata,
  ): Promise<HelloResponse> | Observable<HelloResponse> | HelloResponse;

  getToken(
    request: LoginRequest,
    metadata?: Metadata,
  ): Promise<DataBaseResponse> | Observable<DataBaseResponse> | DataBaseResponse;

  checkToken(request: SendRequest, metadata?: Metadata): Promise<Empty> | Observable<Empty> | Empty;
}

export function HelloServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sayHello", "getToken", "checkToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("HelloService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("HelloService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const HELLO_SERVICE_NAME = "HelloService";
